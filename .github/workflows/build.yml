name: build & deploy

on:
  push:
  workflow_dispatch:
    inputs:
      build_target:
        description: 'Build target'
        required: true
        default: 'ci_stage'
        type: choice
        options:
        - ci_stage
        - ci_prod

env:
  ARTIFACTS_PATH: artifacts
  PROJECT_NAME: genesis_workspace
  REPO_ENDPOINT: http://10.20.0.1:8081
  REPO_ENDPOINT_PUT: http://10.20.0.1:8082
  CORE_ENDPOINT: http://10.20.0.2:11010
  NODE_NS_UUID: 3ea35d89-fc3c-43d1-82fe-40980edbf617
  PROJECT_ID: d4ef38ee-2667-4931-90fd-c858d4bc5f1c
  # All vars you need to pass to build the flutter app goes here with prefix "UI_BUILD_ENV_".
  # There is a build python script `make_ui_build_env.py` that handles these variables and
  # form a json file. For instance, if you need to pass `api_url="https://console.genesis-core.tech/api"`
  # variable, you need to set `UI_BUILD_ENV_api_url` environment variable and the result file will be:
  # {
  #   "api_url": "https://console.genesis-core.tech/api"
  # }
  UI_BUILD_ENV_legacy_ui: "/legacy"

jobs:
  build:
    runs-on: [self-hosted, flutter]
    strategy:
      fail-fast: true
    steps:
      - uses: actions/checkout@v3
      - name: Build Genesis Workspace Android & Web
        env:
            DEV_KEYS: ${{ secrets.DEV_KEYS }}
            UI_BUILD_ENV_BUILD_TARGET: ${{ github.event.inputs.build_target }}
            PROD_URL: ${{ secrets.PROD_URL }}
            DEV_URL: ${{ secrets.DEV_URL }}
        run: |
          set -eux
          mkdir -p ${ARTIFACTS_PATH}
          BUILD_TARGET="${UI_BUILD_ENV_BUILD_TARGET:-ci_stage}"
          WEB_DIR="$(pwd)/__html"
          mkdir -p "${WEB_DIR}"

          # Install DevTools
          python3 -m venv venv
          source venv/bin/activate
          pip install genesis-devtools
          VERSION="$(genesis get-version .)"

          if [[ "${UI_BUILD_ENV_BUILD_TARGET}" == "ci_prod" ]]; then
            export UI_BUILD_ENV_prod_url="${PROD_URL}"
            python3 /usr/local/bin/make_ui_build_env
            make ci_prod_apk
            curl -X PUT --upload-file build/app/outputs/flutter-apk/app-prod-release.apk \
              $REPO_ENDPOINT_PUT/${PROJECT_NAME}/${VERSION}/workspace-app.apk
            make ci_prod_web
          else
            export UI_BUILD_ENV_dev_url="${DEV_URL}"
            python3 /usr/local/bin/make_ui_build_env
            make ci_stage_apk
            curl -X PUT --upload-file build/app/outputs/flutter-apk/app-stage-release.apk \
              $REPO_ENDPOINT_PUT/${PROJECT_NAME}/${VERSION}/workspace-app.apk
            make ci_stage_web
          fi

          find "build/web/" -maxdepth 1 -type f -exec mv -t "$WEB_DIR/" {} +
          cp -r "build/web/assets" "$WEB_DIR/"
          cd "$WEB_DIR"
          tar -czf /tmp/web.tar.gz . 
          curl -X PUT --upload-file /tmp/web.tar.gz \
            $REPO_ENDPOINT_PUT/${PROJECT_NAME}/${VERSION}/workspace-web.tar.gz
          cd -
          rm -rf "$WEB_DIR" /tmp/web.tar.gz

          # Common target for all environments
          make ci_prod_linux
          curl -X PUT --upload-file build/linux/x64/release/bundle/genesis_workspace \
            $REPO_ENDPOINT_PUT/${PROJECT_NAME}/${VERSION}/genesis_workspace

      - name: Build Genesis Workspace VM image
        env:
            DEV_KEYS: ${{ secrets.DEV_KEYS }}
            UI_BUILD_ENV_BUILD_TARGET: ${{ github.event.inputs.build_target }}
            PROD_URL: ${{ secrets.PROD_URL }}
            DEV_URL: ${{ secrets.DEV_URL }}
        run: |
          set -eux
          mkdir -p ${ARTIFACTS_PATH}
          BUILD_TARGET="${UI_BUILD_ENV_BUILD_TARGET:-ci_stage}"

          # Node UUID based on the build target
          python3 -c "import uuid; print(uuid.uuid5(uuid.UUID(\"${NODE_NS_UUID}\"),\"${BUILD_TARGET}\"))" > "${ARTIFACTS_PATH}/node_uuid.txt"

          # Install DevTools
          python3 -m venv venv
          source venv/bin/activate
          pip install genesis-devtools
          
          VERSION="$(genesis get-version .)"
          echo "${DEV_KEYS}" > dev-keys.txt
          export UI_BUILD_ENV_WEB_ARCHIVE="$REPO_ENDPOINT_PUT/${PROJECT_NAME}/${VERSION}/workspace-web.tar.gz"

          genesis build $(pwd) -i dev-keys.txt

          # Upload the VM image
          curl -X PUT --upload-file output/genesis-workspace.raw \
            $REPO_ENDPOINT_PUT/${PROJECT_NAME}/${VERSION}/genesis-workspace.raw

          # Temporary upload step is done in the build script
          echo "${VERSION}" > "${ARTIFACTS_PATH}/version.txt"

      - name: Upload the build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build_artifacts
          path: artifacts/
      
  deploy:
    runs-on: [self-hosted, flutter]
    needs: [build]
    steps:
      - name: Download the build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build_artifacts
      - name: Deploy Genesis Workspace
        env:
          CORE_USER: ${{ secrets.CORE_USER }}
          CORE_PASSWORD: ${{ secrets.CORE_PASSWORD }}
        run: |
          set -eux

          VERSION=$(cat ${ARTIFACTS_PATH}/version.txt)
          NODE_UUID=$(cat ${ARTIFACTS_PATH}/node_uuid.txt)

          # Install CI tools
          rm -fr venv
          python3 -m venv venv
          source venv/bin/activate
          pip install genesis-ci-tools

          genesis-ci -e $CORE_ENDPOINT -u $CORE_USER -p $CORE_PASSWORD nodes add-or-update \
            --wait \
            -u $NODE_UUID \
            -p $PROJECT_ID \
            -i "${REPO_ENDPOINT}/${PROJECT_NAME}/${VERSION}/genesis-workspace.raw"
